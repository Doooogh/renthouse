<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.graduation.renthouse.rent.user.dao.UserDao">

	<select id="get" resultType="com.graduation.renthouse.rent.user.domain.UserDO">
		select `user_id`,`name`,`username`,`password`,`phone`,`sex`,`age`,`status`,`createtime`,`updatetime` from user where user_id = #{value}
	</select>

	<select id="list" resultType="com.graduation.renthouse.rent.user.domain.UserDO">
		select `user_id`,`name`,`username`,`password`,`phone`,`sex`,`age`,`status`,`createtime`,`updatetime` from user
        <where>  
		  		  <if test="userId != null and userId != ''"> and user_id = #{userId} </if>
		  		  <if test="name != null and name != ''"> and name = #{name} </if>
		  		  <if test="username != null and username != ''"> and username = #{username} </if>
		  		  <if test="password != null and password != ''"> and password = #{password} </if>
		  		  <if test="phone != null and phone != ''"> and phone = #{phone} </if>
		  		  <if test="sex != null and sex != ''"> and sex = #{sex} </if>
		  		  <if test="age != null and age != ''"> and age = #{age} </if>
		  		  <if test="status != null and status != ''"> and status = #{status} </if>
		  		  <if test="createtime != null and createtime != ''"> and createtime = #{createtime} </if>
		  		  <if test="updatetime != null and updatetime != ''"> and updatetime = #{updatetime} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by user_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from user
		 <where>  
		  		  <if test="userId != null and userId != ''"> and user_id = #{userId} </if>
		  		  <if test="name != null and name != ''"> and name = #{name} </if>
		  		  <if test="username != null and username != ''"> and username = #{username} </if>
		  		  <if test="password != null and password != ''"> and password = #{password} </if>
		  		  <if test="phone != null and phone != ''"> and phone = #{phone} </if>
		  		  <if test="sex != null and sex != ''"> and sex = #{sex} </if>
		  		  <if test="age != null and age != ''"> and age = #{age} </if>
		  		  <if test="status != null and status != ''"> and status = #{status} </if>
		  		  <if test="createtime != null and createtime != ''"> and createtime = #{createtime} </if>
		  		  <if test="updatetime != null and updatetime != ''"> and updatetime = #{updatetime} </if>
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.graduation.renthouse.rent.user.domain.UserDO" useGeneratedKeys="true" keyProperty="userId">
		insert into user
		(
			`name`, 
			`username`, 
			`password`, 
			`phone`, 
			`sex`, 
			`age`, 
			`status`,
			`createtime`,
			`updatetime`
		)
		values
		(
			#{name}, 
			#{username}, 
			#{password}, 
			#{phone}, 
			#{sex}, 
			#{age}, 
			#{status},
			#{createtime},
			#{updatetime}
		)
	</insert>
	 
	<update id="update" parameterType="com.graduation.renthouse.rent.user.domain.UserDO">
		update user 
		<set>
			<if test="name != null">`name` = #{name}, </if>
			<if test="username != null">`username` = #{username}, </if>
			<if test="password != null">`password` = #{password}, </if>
			<if test="phone != null">`phone` = #{phone}, </if>
			<if test="sex != null">`sex` = #{sex}, </if>
			<if test="age != null">`age` = #{age}, </if>
			<if test="status != null">`status` = #{status}</if>
		</set>
		where user_id = #{userId}
	</update>
	
	<delete id="remove">
		delete from user where user_id = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from user where user_id in 
		<foreach item="userId" collection="array" open="(" separator="," close=")">
			#{userId}
		</foreach>
	</delete>

	<select id="selectByUsername" resultType="com.graduation.renthouse.rent.user.domain.UserDO">
		select *from user where username=#{username}
	</select>


	<select id="getByUsername" parameterType="String" resultType="com.graduation.renthouse.rent.user.domain.UserDO">
        select * from user where username=#{username}
    </select>

	<select id="getRoles" parameterType="String" resultType="String">
        SELECT NAME FROM ROLE WHERE ROLE_ID IN (SELECT ROLE_ID FROM USER_ROLE WHERE USER_ID IN (SELECT USER_ID FROM USER WHERE username=#{username}))
    </select>
	<select id="getPermissions" parameterType="String" resultType="String">
        SELECT PERMISSION FROM PERMISSION WHERE ID IN (SELECT PER_ID FROM ROLE_PER WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_ID IN (SELECT ROLE_ID FROM USER_ROLE WHERE USER_ID IN (SELECT USER_ID FROM USER WHERE username=#{username}))))
    </select>

	<select id="getPermissionsByUserId" resultType="com.graduation.renthouse.rent.permission.domain.PermissionDO">
		select  `id`,`parent_id`,`name`,`url`,`permission`,`type`,`img`,`createtime`,`updatetime` from permission where id in
		(select per_id from role_per where role_id in
		(select role_id from user_role where user_id=#{userId})) order by `id`
	</select>

</mapper>